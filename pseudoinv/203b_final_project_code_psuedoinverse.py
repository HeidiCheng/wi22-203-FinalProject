# -*- coding: utf-8 -*-
"""203B_Final_Project_Code_PsuedoInverse.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uyQG80HcFFDAfaA_EmcUz2tA-FUkriF8
"""

#https://www.cvxpy.org/
#https://www.cvxpy.org/tutorial/advanced/index.html
#https://www.pythontutorial.net/python-basics/python-read-text-file/
import numpy as np
import cvxpy as cp
from scipy.io import wavfile
import librosa    
from pathlib import Path
from google.colab import drive

# # ##UNCOMMENT EACH TIME

drive.mount('/content/gdrive')

!unzip gdrive/MyDrive/p2.zip
!unzip gdrive/MyDrive/p3.zip
!unzip gdrive/MyDrive/p4.zip
!unzip gdrive/MyDrive/p6.zip
!unzip gdrive/MyDrive/p5.zip

!unzip gdrive/MyDrive/g2.zip
!unzip gdrive/MyDrive/g3.zip
!unzip gdrive/MyDrive/g4.zip
!unzip gdrive/MyDrive/g6.zip
!unzip gdrive/MyDrive/g5.zip

with open('train.txt') as train_file:
    count = 0
    spectrogram_piano = np.zeros((9000, 4000)) #4000 samples
    spectrogram_guitar = np.zeros((9000, 4000)) #b
    for entry in train_file:
        split_entry = entry.split(",")
        folder = split_entry[0].strip()
        t_wav = split_entry[1].strip()

        input_name = '/content/p'+ folder+ '/' + t_wav +'.wav'
        output_name = '/content/g'+ folder+ '/' + t_wav +'.wav'

        spectrogram_piano[:,count] = librosa.load(input_name, sr=3000)[0].flatten() #x
        spectrogram_guitar[:,count] = librosa.load(output_name, sr=3000)[0].flatten() #b
        count += 1

"""spect piano (9000x19) for 19 samples 
spect guitar (9000x19) for same 19 samples 

"""

print(spectrogram_piano)

x_inv = np.linalg.pinv(spectrogram_piano)

A = spectrogram_guitar@x_inv # A = b * psuedo inverse of x

# Testing the diff
diff = A@spectrogram_piano - spectrogram_guitar
print(diff)

spectrogram_piano_test = np.zeros((9000, 1)) #X
spectrogram_piano_test[:,0] = librosa.load('/content/p3/0001.wav', sr=3000)[0].flatten()

spectrogram_guitar_test = np.zeros((9000, 1)) #B
spectrogram_guitar_test[:,0] = librosa.load('/content/g3/0001.wav', sr=3000)[0].flatten()

# reconstructed guitar sound -> AX
guitar_reconst = A@spectrogram_piano_test
print(guitar_reconst)

print(spectrogram_guitar_test)

# Write to output files
from __future__ import print_function
import scipy.io.wavfile as wavf
import numpy as np

wavf.write('specto_piano_test0001.wav', 3000, spectrogram_piano_test)
wavf.write('reconst_guitar_0001.wav', 3000, guitar_reconst)
wavf.write('specto_guitar_test0001.wav', 3000, spectrogram_guitar_test)

"""MORE TESTING

"""

spectrogram_piano_test = np.zeros((9000, 1)) #x
spectrogram_piano_test[:,0] = librosa.load('/content/p4/0004.wav', sr=3000)[0].flatten()

guitar_reconst = A@spectrogram_piano_test
print(guitar_reconst)

from __future__ import print_function
import scipy.io.wavfile as wavf
import numpy as np

wavf.write('specto_piano_test40004.wav', 3000, spectrogram_piano_test)
wavf.write('reconst_guitar_40004.wav', 3000, guitar_reconst)
# wavf.write('specto_guitar_test40004.wav', 3000, spectrogram_guitar_test)

spectrogram_guitar_test = np.zeros((9000, 1)) #b
spectrogram_guitar_test[:,0] = librosa.load('/content/g4/0004.wav', sr=3000)[0].flatten()
wavf.write('specto_guitar_test40004.wav', 3000, spectrogram_guitar_test)
print(spectrogram_guitar_test)